services:
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
    ports:
      - "5432:5432"  # Adicionar se precisar acessar o postgres direto

  airflow-webserver:
    build: .
    depends_on:
      postgres:
        condition: service_healthy  # Garante que só inicia após postgres estar saudável
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=true
      - AIRFLOW__WEBSERVER__SECRET_KEY=your_secret_key_here  # Recomendado para produção
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs  # Adiciona persistência para logs
    ports:
      - "8080:8080"
    command: bash -c "airflow db init && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com && airflow webserver"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build: .
    depends_on:
      airflow-webserver:
        condition: service_healthy  # Garante que só inicia após webserver estar pronto
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs  # Adiciona persistência para logs
    command: airflow scheduler

volumes:
  postgres-db-volume: